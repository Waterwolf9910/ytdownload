diff --git a/lib/sig.js b/lib/sig.js
index 31fb861d4a84360925fcafc8623979de359f659c..3d4855d2d4a3cb239c602528e1e956ef2325513b 100644
--- a/lib/sig.js
+++ b/lib/sig.js
@@ -58,20 +58,23 @@ const DECIPHER_REGEXP =
   'return \\1\\.join\\(""\\)' +
   `\\}`;
 
-const HELPER_REGEXP = `var (${VARIABLE_PART})=\\{((?:(?:${VARIABLE_PART_DEFINE}${REVERSE_PART}|${
-  VARIABLE_PART_DEFINE
-}${SLICE_PART}|${VARIABLE_PART_DEFINE}${SPLICE_PART}|${VARIABLE_PART_DEFINE}${SWAP_PART}),?\\n?)+)\\};`;
+const HELPER_REGEXP = `var (${VARIABLE_PART})=\\{((?:(?:${VARIABLE_PART_DEFINE}${REVERSE_PART}|${VARIABLE_PART_DEFINE
+  }${SLICE_PART}|${VARIABLE_PART_DEFINE}${SPLICE_PART}|${VARIABLE_PART_DEFINE}${SWAP_PART}),?\\n?)+)\\};`;
+
+
+const STRING_PART = `(?:"(?:\\\\.|[^"\\\\])*"|'(?:\\\\.|[^'\\\\])*')`;
+const HELPER_VAR_REGEXP = `'use strict';(var ${VARIABLE_PART}=(?:\\[(?:${STRING_PART},?\\n?)*\\]|${STRING_PART}\\.split\\(${STRING_PART}\\)))`;
 
 const SCVR = "[a-zA-Z0-9$_]";
 const MCR = `${SCVR}+`;
 const AAR = "\\[(\\d+)]";
 const N_TRANSFORM_NAME_REGEXPS = {
-  [`${SCVR}="nn"\\[\\+${MCR}\\.${MCR}],${MCR}\\(${MCR}\\),${MCR}=${MCR}\\.${MCR}\\[${MCR}]\\|\\|null\\).+\\|\\|(${MCR})\\(""\\)`]: 1,
-  [`${SCVR}="nn"\\[\\+${MCR}\\.${MCR}],${MCR}\\(${MCR}\\),${MCR}=${MCR}\\.${MCR}\\[${MCR}]\\|\\|null\\)&&\\(${MCR}=(${MCR})${AAR}`]: 1,
-  [`${SCVR}="nn"\\[\\+${MCR}\\.${MCR}],${MCR}=${MCR}\\.get\\(${MCR}\\)\\).+\\|\\|(${MCR})\\(""\\)`]: 1,
-  [`${SCVR}="nn"\\[\\+${MCR}\\.${MCR}],${MCR}=${MCR}\\.get\\(${MCR}\\)\\)&&\\(${MCR}=(${MCR})\\[(\\d+)]`]: 1,
-  [`\\(${SCVR}=String\\.fromCharCode\\(110\\),${SCVR}=${SCVR}\\.get\\(${SCVR}\\)\\)&&\\(${SCVR}=(${MCR})(?:${AAR})?\\(${SCVR}\\)`]: 1,
-  [`\\.get\\("n"\\)\\)&&\\(${SCVR}=(${MCR})(?:${AAR})?\\(${SCVR}\\)`]: 1,
+  [ `${SCVR}="nn"\\[\\+${MCR}\\.${MCR}],${MCR}\\(${MCR}\\),${MCR}=${MCR}\\.${MCR}\\[${MCR}]\\|\\|null\\).+\\|\\|(${MCR})\\(""\\)` ]: 1,
+  [ `${SCVR}="nn"\\[\\+${MCR}\\.${MCR}],${MCR}\\(${MCR}\\),${MCR}=${MCR}\\.${MCR}\\[${MCR}]\\|\\|null\\)&&\\(${MCR}=(${MCR})${AAR}` ]: 1,
+  [ `${SCVR}="nn"\\[\\+${MCR}\\.${MCR}],${MCR}=${MCR}\\.get\\(${MCR}\\)\\).+\\|\\|(${MCR})\\(""\\)` ]: 1,
+  [ `${SCVR}="nn"\\[\\+${MCR}\\.${MCR}],${MCR}=${MCR}\\.get\\(${MCR}\\)\\)&&\\(${MCR}=(${MCR})\\[(\\d+)]` ]: 1,
+  [ `\\(${SCVR}=String\\.fromCharCode\\(110\\),${SCVR}=${SCVR}\\.get\\(${SCVR}\\)\\)&&\\(${SCVR}=(${MCR})(?:${AAR})?\\(${SCVR}\\)` ]: 1,
+  [ `\\.get\\("n"\\)\\)&&\\(${SCVR}=(${MCR})(?:${AAR})?\\(${SCVR}\\)` ]: 1,
 };
 
 // LavaPlayer regexps
@@ -92,11 +95,11 @@ const matchRegex = (regex, str) => {
   return match;
 };
 
-const matchGroup = (regex, str, idx = 0) => matchRegex(regex, str)[idx];
+const matchGroup = (regex, str, idx = 0) => matchRegex(regex, str)[ idx ];
 
 const getFuncName = (body, regexps) => {
   let fn;
-  for (const [regex, idx] of Object.entries(regexps)) {
+  for (const [ regex, idx ] of Object.entries(regexps)) {
     try {
       fn = matchGroup(regex, body, idx);
       try {
@@ -120,7 +123,8 @@ const extractDecipherFunc = (exports.d1 = body => {
     const decipherFunc = matchGroup(DECIPHER_REGEXP, body, 0);
     const resultFunc = `var ${DECIPHER_FUNC_NAME}=${decipherFunc};`;
     const callerFunc = `${DECIPHER_FUNC_NAME}(${DECIPHER_ARGUMENT});`;
-    return helperObject + resultFunc + callerFunc;
+    const helperVar = matchGroup(HELPER_VAR_REGEXP, body, 0) + ';';
+    return helperVar + helperObject + resultFunc + callerFunc;
   } catch (e) {
     return null;
   }
@@ -135,7 +139,8 @@ const extractDecipherWithName = (exports.d2 = body => {
     const helperPattern = `(var ${helperObjectName.replace(/\$/g, "\\$")}=\\{[\\s\\S]+?\\}\\};)`;
     const helperObject = matchGroup(helperPattern, body, 1);
     const callerFunc = `${decipherFuncName}(${DECIPHER_ARGUMENT});`;
-    return helperObject + decipherFunc + callerFunc;
+    const helperVar = matchGroup(HELPER_VAR_REGEXP, body, 1) + ';';
+    return helperVar + helperObject + decipherFunc + callerFunc;
   } catch (e) {
     return null;
   }
@@ -158,15 +163,15 @@ let decipherWarning = false;
 // This is required function to get the stream url, but we can continue if user doesn't need stream url.
 const extractDecipher = body => {
   // Faster: extractDecipherFunc
-  const decipherFunc = getExtractFunctions([extractDecipherFunc, extractDecipherWithName], body);
+  const decipherFunc = getExtractFunctions([ extractDecipherFunc, extractDecipherWithName ], body);
   if (!decipherFunc && !decipherWarning) {
     console.warn(
       "\x1b[33mWARNING:\x1B[0m Could not parse decipher function.\n" +
-        "Stream URLs will be missing.\n" +
-        `Please report this issue by uploading the "${utils.saveDebugFile(
-          "base.js",
-          body,
-        )}" file on https://github.com/distubejs/ytdl-core/issues/144.`,
+      "Stream URLs will be missing.\n" +
+      `Please report this issue by uploading the "${utils.saveDebugFile(
+        "base.js",
+        body,
+      )}" file on https://github.com/distubejs/ytdl-core/issues/144.`,
     );
     decipherWarning = true;
   }
@@ -201,17 +206,17 @@ const extractNTransformWithName = (exports.n2 = body => {
 let nTransformWarning = false;
 const extractNTransform = body => {
   // Faster: extractNTransformFunc
-  const nTransformFunc = getExtractFunctions([extractNTransformFunc, extractNTransformWithName], body, code =>
+  const nTransformFunc = getExtractFunctions([ extractNTransformFunc, extractNTransformWithName ], body, code =>
     code.replace(/if\s*\(\s*typeof\s*[\w$]+\s*===?.*?\)\s*return\s+[\w$]+\s*;?/, ""),
   );
   if (!nTransformFunc && !nTransformWarning) {
     // This is optional, so we can continue if it's not found, but it will bottleneck the download.
     console.warn(
       "\x1b[33mWARNING:\x1B[0m Could not parse n transform function.\n" +
-        `Please report this issue by uploading the "${utils.saveDebugFile(
-          "base.js",
-          body,
-        )}" file on https://github.com/distubejs/ytdl-core/issues/144.`,
+      `Please report this issue by uploading the "${utils.saveDebugFile(
+        "base.js",
+        body,
+      )}" file on https://github.com/distubejs/ytdl-core/issues/144.`,
     );
     nTransformWarning = true;
   }
@@ -224,7 +229,7 @@ const extractNTransform = body => {
  * @param {string} body
  * @returns {Array.<string>}
  */
-exports.extractFunctions = body => [extractDecipher(body), extractNTransform(body)];
+exports.extractFunctions = body => [ extractDecipher(body), extractNTransform(body) ];
 
 /**
  * Apply decipher and n-transform to individual format
@@ -240,7 +245,7 @@ exports.setDownloadURL = (format, decipherScript, nTransformScript) => {
     if (!args.s) return args.url;
     const components = new URL(decodeURIComponent(args.url));
     const context = {};
-    context[DECIPHER_ARGUMENT] = decodeURIComponent(args.s);
+    context[ DECIPHER_ARGUMENT ] = decodeURIComponent(args.s);
     components.searchParams.set(args.sp || "sig", decipherScript.runInNewContext(context));
     return components.toString();
   };
@@ -249,7 +254,7 @@ exports.setDownloadURL = (format, decipherScript, nTransformScript) => {
     const n = components.searchParams.get("n");
     if (!n || !nTransformScript) return url;
     const context = {};
-    context[N_ARGUMENT] = n;
+    context[ N_ARGUMENT ] = n;
     components.searchParams.set("n", nTransformScript.runInNewContext(context));
     return components.toString();
   };
@@ -269,10 +274,10 @@ exports.setDownloadURL = (format, decipherScript, nTransformScript) => {
  */
 exports.decipherFormats = async (formats, html5player, options) => {
   const decipheredFormats = {};
-  const [decipherScript, nTransformScript] = await exports.getFunctions(html5player, options);
+  const [ decipherScript, nTransformScript ] = await exports.getFunctions(html5player, options);
   formats.forEach(format => {
     exports.setDownloadURL(format, decipherScript, nTransformScript);
-    decipheredFormats[format.url] = format;
+    decipheredFormats[ format.url ] = format;
   });
   return decipheredFormats;
 };
